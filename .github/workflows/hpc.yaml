name: HPC

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"  # nightly run

jobs:
  hpc-sim:
    name: Simulated HPC Job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ">=3.10"

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.JAWM_BIOINFORMATICS_KEY }}

      - name: Add GitHub to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Install jawm
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          python -m pip install --upgrade pip
          pip install git+ssh://git@github.com/mpg-age-bioinformatics/jawm.git

      - name: Install Slurm and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y slurm-wlm wget curl jq

      - name: Install Apptainer from official release (robust)
        run: |
          echo "Fetching latest Apptainer .deb..."
          RELEASE_API="https://api.github.com/repos/apptainer/apptainer/releases/latest"

          # Get all .deb assets and pick the stable one (exclude 'dbgsym' and 'trixie+')
          URL=$(curl -s $RELEASE_API | jq -r '.assets[] | .browser_download_url' \
            | grep -E 'apptainer_[0-9].*amd64\.deb$' \
            | grep -v 'dbgsym' \
            | grep -v 'trixie' \
            | head -n 1)

          if [ -z "$URL" ]; then
            echo "⚠️ No valid .deb found in latest release. Falling back to 1.3.2."
            URL="https://github.com/apptainer/apptainer/releases/download/v1.3.2/apptainer_1.3.2_amd64.deb"
          fi

          echo "Downloading: $URL"
          wget -q "$URL" -O apptainer.deb
          sudo apt-get install -y ./apptainer.deb
          apptainer --version

      - name: Verify installations
        run: |
          echo "=== Versions ==="
          sinfo --version || echo "Slurm not found"
          apptainer --version

      - name: Setup fake Slurm environment
        run: |
          echo "Creating fake Slurm config..."
          sudo mkdir -p /etc/slurm
          sudo bash -c 'cat > /etc/slurm/slurm.conf <<EOF
          ClusterName=fakecluster
          ControlMachine=localhost
          SlurmdPort=7003
          SlurmUser=runner
          StateSaveLocation=/tmp/slurm-state
          SlurmdSpoolDir=/tmp/slurmd
          SlurmctldPort=7002
          ProctrackType=proctrack/linuxproc
          ReturnToService=1
          SlurmctldTimeout=300
          SlurmdTimeout=300
          NodeName=localhost CPUs=2 RealMemory=4000 State=UNKNOWN
          PartitionName=debug Nodes=localhost Default=YES MaxTime=INFINITE State=UP
          EOF'

          echo "Starting fake slurmctld..."
          sudo mkdir -p /tmp/slurm-state /tmp/slurmd
          sudo slurmctld -D -c &
          sleep 3
          echo "Slurm configured."

      - name: Build Apptainer container
        run: |
          echo "Bootstraping Apptainer container..."
          cat << 'EOF' > container.def
          Bootstrap: docker
          From: ubuntu:22.04
          %post
              apt-get update && apt-get install -y python3
              echo "Hello from Apptainer container!"
          %runscript
              echo "Running container with $(python3 --version)"
          EOF

          sudo apptainer build mycontainer.sif container.def

      - name: Start local Slurm daemons
        run: |
          sudo mkdir -p /var/run/slurm /var/spool/slurmd /var/spool/slurmctld
          sudo touch /var/run/slurm/slurmctld.pid
          sudo slurmd -D -c &
          sudo slurmctld -D -c &
          sleep 5
          scontrol ping || echo "⚠️ Slurm still unreachable"

      - name: Mock Slurm commands for CI
        run: |
          mkdir -p ~/fake_slurm
          cat > ~/fake_slurm/sbatch <<'EOF'
          #!/bin/bash
          echo "[MOCK] sbatch called -> executing job immediately"
          # extract wrapped command if provided
          while [[ $# -gt 0 ]]; do
            case $1 in
              --wrap=*) cmd="${1#*=}" ;;
            esac
            shift
          done
          bash -c "${cmd:-$@}"
          EOF
          chmod +x ~/fake_slurm/sbatch
          echo "$HOME/fake_slurm" >> $GITHUB_PATH
          
      - name: Submit fake Slurm job that uses Apptainer
        run: |
          echo '#!/bin/bash' > job.sh
          echo 'echo "=== SLURM JOB START ==="' >> job.sh
          echo 'apptainer run mycontainer.sif' >> job.sh
          echo 'echo "=== SLURM JOB END ==="' >> job.sh
          chmod +x job.sh

          echo "Submitting job to fake Slurm queue..."
          sbatch --job-name=test-job --wrap="./job.sh" 

      - name: Run jawm
        run: |
          jawm-test -p system -j local -t ./test/hpc.txt

      - name: Succeeded
        if: success()
        run: echo "✅ test.py succeeded!" 

      - name: Slack Failure Notification
        if: failure() # skip during local actions testing
        run: |
          echo "❌ Job failed!" && \
          generate_post_data()
          {
            cat << EOF
          {
            "text": "❌ *${GITHUB_REPOSITORY##*/}@$(echo $GITHUB_SHA | cut -c 1-8)* test FAILED\n<https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}|View Run>"
          }
          EOF
          }
          curl -H "Content-Type: application/json" -X POST -d "$(generate_post_data)" ${{ secrets.SLACK_JAWM_WEBHOOK }}

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up temporary Slurm files..."
          sudo pkill slurmctld || true
          rm -rf container.def mycontainer.sif job.sh /tmp/slurm-state /tmp/slurmd
          echo "✅ Simulation complete."
